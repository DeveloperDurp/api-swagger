schemes: []
swagger: '2.0'
info:
  description: API for Durp's needs
  title: DurpAPI
  termsOfService: http://swagger.io/terms/
  contact:
    name: API Support
    url: https://durp.info
    email: developerdurp@durp.info
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0-dev0141
host: api.durp.info
basePath: /api
paths:
  /health/gethealth:
    get:
      security:
        - Authorization: []
      description: Get the health of the API
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - health
      summary: Generate Health status
      responses:
        '200':
          description: response
          schema:
            $ref: '#/definitions/model.Message'
        '500':
          description: error
          schema:
            $ref: '#/definitions/model.Message'
  /jokes/dadjoke:
    get:
      description: get a dad joke
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - DadJoke
      summary: Get dadjoke
      responses:
        '200':
          description: response
          schema:
            $ref: '#/definitions/model.Message'
        '500':
          description: error
          schema:
            $ref: '#/definitions/model.Message'
    post:
      description: create a dad joke
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - DadJoke
      summary: Generate dadjoke
      parameters:
        - type: string
          description: Dad Joke you wish to enter into database
          name: joke
          in: query
          required: true
      responses:
        '200':
          description: response
          schema:
            $ref: '#/definitions/model.Message'
        '500':
          description: error
          schema:
            $ref: '#/definitions/model.Message'
    delete:
      description: create a dad joke
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - DadJoke
      summary: Generate dadjoke
      parameters:
        - type: string
          description: Dad joke you wish to delete from the database
          name: joke
          in: query
          required: true
      responses:
        '200':
          description: response
          schema:
            $ref: '#/definitions/model.Message'
        '500':
          description: error
          schema:
            $ref: '#/definitions/model.Message'
  /openai/general:
    get:
      description: Ask ChatGPT a general question
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - openai
      summary: Gerneral ChatGPT
      parameters:
        - type: string
          description: Ask ChatGPT a general question
          name: message
          in: query
          required: true
      responses:
        '200':
          description: response
          schema:
            $ref: '#/definitions/model.Message'
        '400':
          description: error
          schema:
            $ref: '#/definitions/model.Message'
  /openai/travelagent:
    get:
      description: Ask ChatGPT for suggestions as if it was a travel agent
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - openai
      summary: Travel Agent ChatGPT
      parameters:
        - type: string
          description: Ask ChatGPT for suggestions as a travel agent
          name: message
          in: query
          required: true
      responses:
        '200':
          description: response
          schema:
            $ref: '#/definitions/model.Message'
        '400':
          description: error
          schema:
            $ref: '#/definitions/model.Message'
definitions:
  model.Message:
    type: object
    properties:
      message:
        type: string
        example: message
securityDefinitions:
  Authorization:
    type: apiKey
    name: Authorization
    in: header
